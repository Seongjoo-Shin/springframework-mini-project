<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
                 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                 
<mapper namespace="com.mycompany.webapp.dao.CommentDao">

	 <resultMap id="commentWithUserResultMap" type="comment">
		<result column="free_no" property="freeNo"/>
		<result column="comment_no" property="commentNo"/>
		<result column="comment_writer" property="commentWriter"/>
		<result column="comment_content" property="commentContent"/>
		<result column="comment_regist_date" property="commentRegistDate"/>
		<result column="comment_modify_date" property="commentModifyDate"/>
		<result column="upper_no" property="upperNo"/>
		<result column="comment_depth" property="commentDepth"/>
		<association property="userDto" javaType="com.mycompany.webapp.dto.UserDto">
			<result column="user_id" property="userId"/>
			<result column="user_nickname" property="userNickname"/> 
		</association>
 	</resultMap> 
 	
 	<select id="selectByFreeNo" parameterType="pager" resultMap="commentWithUserResultMap">
 		SELECT rnum, free_no, comment_no, comment_writer, comment_content, comment_regist_date, comment_modify_date, comment_use_yn, upper_no, comment_depth, user_Nickname
		FROM (
		  SELECT ROWNUM as rnum, free_no, comment_no, comment_writer, comment_content, comment_regist_date, comment_modify_date, comment_use_yn, upper_no, comment_depth, user_Nickname
		  FROM (
			SELECT free_no
			        ,comment_no
			        ,comment_writer
			        ,comment_content
			        ,comment_regist_date
			        ,comment_modify_date
			        ,comment_use_yn
			        ,upper_no
			        ,comment_depth
			        ,user_Nickname
			FROM comments c, users u
			where c.free_no=#{freeNo} and c.comment_use_yn=1 and  c.comment_writer = u.user_id
			START WITH c.upper_no is null
			CONNECT BY PRIOR c.comment_no = c.upper_no
		  )
		  WHERE rownum &lt;= #{endRowNo}  
		)
		WHERE rnum &gt;= #{startRowNo}
 	</select>
 	
 	<select id="count" parameterType="int" resultType="Integer">
 		select count(*) from comments where free_no=#{freeNo}
 	</select>
 	

	<insert id="insertComment" parameterType="Map">
		<selectKey keyProperty="commentNo" resultType="int" order="BEFORE">
			select COMMENTS_SEQ.nextval from dual
		</selectKey>
		insert into comments (
			free_no, 
			comment_no, 
			comment_writer, 
			comment_content, 
			comment_regist_date, 
			comment_modify_date, 
			comment_use_yn, 
			upper_no, 
			comment_depth)
		values(
			#{freeNo}, 
			#{commentNo}, 
			#{commentWriter}, 
			#{commentContent}, 
			SYSDATE, 
			SYSDATE, 
			1, 
			null, 
			0)
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="deleteComment" parameterType="int">
		update comments 
		set comment_use_yn = 0
		where comment_no = #{commentNo}
	</update>
	
	<!-- 댓글 수정 -->
	<update id="updateComment" parameterType="comment">
		update comments
		set comment_content = #{commentContent},
			comment_modify_date = SYSDATE
		where comment_no = #{commentNo}
	</update>

	<!-- 대댓글 버튼1 -->
<!-- 	<select id="selectbyCommentNo" parameterType="int" resultType="comment">
	    SELECT c.free_no, c.comment_no, c.comment_writer, c.comment_content, c.comment_regist_date, c.comment_modify_date, c.comment_use_yn, c.upper_no, c.comment_depth, u.user_Nickname
	    FROM comments c, users u
	    where c.comment_writer = u.user_id and c.comment_no = #{commentNo} and c.comment_use_yn=1
	</select> -->
	
	<!-- 대댓글 insert -->
	<insert id="insertReplyComment" parameterType="Map">
		<selectKey keyProperty="commentNo" resultType="int" order="BEFORE">
			select COMMENTS_SEQ.nextval from dual
		</selectKey>
		insert into comments (
			free_no, 
			comment_no, 
			comment_writer, 
			comment_content, 
			comment_regist_date, 
			comment_modify_date, 
			comment_use_yn, 
			upper_no, 
			comment_depth)
		values(
			#{freeNo}, 
			#{commentNo}, 
			#{commentWriter}, 
			#{commentContent}, 
			#{commentRegistDate}, 
			#{commentModifyDate}, 
			1, 
			#{upperNo}, 
			#{commentDepth})
	</insert>
	

</mapper>